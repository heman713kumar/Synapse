// sw.js

const CACHE_NAME = 'synapse-cache-v4'; // Incremented cache version
// These URLs are relative to the service worker's scope.
// For a production app, this list should be generated by a build tool
// to include all JS, CSS, and asset files.
const APP_SHELL_URLS = [
  './',
  './index.html',
  './manifest.json',
  './vite.svg',
];

self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        console.log('Service Worker: Caching app shell');
        return cache.addAll(APP_SHELL_URLS);
      })
      .catch(err => {
        console.error('SW Caching failed:', err);
      })
  );
});

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames
          .filter(cacheName => cacheName !== CACHE_NAME)
          .map(cacheName => caches.delete(cacheName))
      );
    })
  );
});

self.addEventListener('fetch', event => {
  const { request } = event;
  const url = new URL(request.url);

  // Use a stale-while-revalidate strategy for the app shell.
  // This provides a fast offline-first experience.
  if (APP_SHELL_URLS.map(u => new URL(u, self.location.origin).pathname).includes(url.pathname)) {
    event.respondWith(
      caches.open(CACHE_NAME).then(cache => {
        return cache.match(request).then(cachedResponse => {
          const fetchPromise = fetch(request).then(networkResponse => {
            if (networkResponse && networkResponse.ok) {
              cache.put(request, networkResponse.clone());
            }
            return networkResponse;
          });
          return cachedResponse || fetchPromise;
        });
      })
    );
    return;
  }

  // Use a network-first strategy for other GET requests (APIs, avatars, etc.).
  // This ensures data is fresh, but provides an offline fallback.
  if (request.method === 'GET') {
    event.respondWith(
      fetch(request)
        .then(networkResponse => {
          if (networkResponse && networkResponse.ok) {
            const responseToCache = networkResponse.clone();
            caches.open(CACHE_NAME).then(cache => {
              cache.put(request, responseToCache);
            });
          }
          return networkResponse;
        })
        .catch(() => {
          return caches.match(request); // Fallback to cache if network fails
        })
    );
  }
});